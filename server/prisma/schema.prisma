generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  username  String     @unique
  password  String
  role      ROLE       @default(EMPLOYEE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  customer  Customer[]
}

enum ROLE {
  MANAGER
  EMPLOYEE
}

model Customer {
  id                      BigInt       @id @db.BigInt
  surname                 String
  firstname               String
  lastname                String
  gender                  String
  birthdate               DateTime
  civilRegistrationNumber String       @unique
  register                String       @unique
  marriageStatus          String
  familyMembers           Int
  education               String
  employment              String
  city                    String
  district                String
  khoroo                  String
  address                 String
  monthlyIncome           BigInt       @db.BigInt
  phone                   Json
  email                   String
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  createdBy               String
  user                    User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  collateral              Collateral[]
  lend                    Lend[]
}

model AssetType {
  id           Int            @id @default(autoincrement())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subAssetType SubAssetType[]
  collateral   Collateral[]
}

model SubAssetType {
  id               Int          @id @default(autoincrement())
  name             String
  assetType        AssetType    @relation(fields: [assetTypeId], references: [id], onDelete: Cascade)
  assetTypeId      Int
  additionalFields Json[]
  collateral       Collateral[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Collateral {
  id               BigInt       @id
  ownerId          BigInt
  owner            Customer     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  assetTypeId      Int
  assetType        AssetType    @relation(fields: [assetTypeId], references: [id], onDelete: Cascade)
  subAssetTypeId   Int
  subAssetType     SubAssetType @relation(fields: [subAssetTypeId], references: [id], onDelete: Cascade)
  collateralName   String
  state            String
  quantity         Int
  depositAmount    Int
  marketValue      Int
  dateOfAssessment DateTime
  description      String
  additionalFields Json?
  sales            Sales[]
}

model Sales {
  id           String     @id @default(uuid())
  collateralId BigInt     @db.BigInt
  collateral   Collateral @relation(fields: [collateralId], references: [id], onDelete: Cascade)
  amountSold   BigInt     @db.BigInt
  soldDate     DateTime
}

model Lend {
  accountNumber Int       @id
  debtorId      BigInt
  debtor        Customer  @relation(fields: [debtorId], references: [id], onDelete: Cascade)
  interestRate  Int
  loanAmount    BigInt    @db.BigInt
  termOfLoan    Int
  startDate     DateTime
  endDate       DateTime
  payment       Payment[]
}

model Payment {
  id                 String @id @default(uuid())
  accountNumber      Int
  lend               Lend   @relation(fields: [accountNumber], references: [accountNumber], onDelete: Cascade)
  principalRepayment Int
  interestRepayment  Int
  loanBalance        Int
}
